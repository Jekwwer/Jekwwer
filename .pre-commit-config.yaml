# .pre-commit-config.yaml: Sets up pre-commit hooks to automate code quality checks.
---
# Sets up CI to automatically update pre-commit hooks
ci:
  run_on_all_branches: true
  autofix_commit_msg: "ci(pre-commit): auto fixes from pre-commit hooks"
  autofix_prs: true
  autoupdate_branch: "main"
  autoupdate_commit_msg: "ci(deps): bump pre-commit hooks"
  autoupdate_schedule: quarterly
  skip:
    - autoupdate # ci can't run local hooks
    - lint # ci can't run local hooks
    - format # ci can't run local hooks
    - bandit # ci can't run local hooks
    - mypy # ci can't run local hooks

repos:
  # Pre-defined hooks from pre-commit-hooks repository
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      # Verifies that the code can be parsed into an abstract syntax tree
      - id: check-ast
        name: "check:abstract-syntax-tree"
      # Ensures no debug statements (like print or pdb) are left in the code
      - id: debug-statements
        name: "check:debug-statements"
      # Ensures files end with a newline
      - id: end-of-file-fixer
        name: "fix:end-of-file"
      # Removes any trailing whitespace
      - id: trailing-whitespace
        name: "fix:trailing-whitespace"
      # Fixes mixed line endings (uses LF by default)
      - id: mixed-line-ending
        name: "fix:mixed-line-endings"
        args: [--fix=lf]
      # Detects accidentally committed private keys
      - id: detect-private-key
        name: "detect:private-keys"
      # Checks that docstrings come first in modules and functions
      - id: check-docstring-first
        name: "check:docstring-first"
      # Validates the syntax of YAML files
      - id: check-yaml
        name: "validate:yaml"
      # Validates the syntax of JSON files
      - id: check-json
        name: "validate:json"
      # Replaces single quotes with double quotes in strings
      - id: double-quote-string-fixer
        name: "fix:double-quote-strings"
      # Ensures there are no unresolved merge conflicts in the code
      - id: check-merge-conflict
        name: "check:merge-conflicts"
      # Detects files that would conflict in case-insensitive filesystems
      - id: check-case-conflict
        name: "check:case-conflicts"
      # Checks that files with a shebang (#!) are executable
      - id: check-shebang-scripts-are-executable
        name: "check:shebang-scripts-executable"

  # Lints Shell scripts
  - repo: https://github.com/Jarmos-san/shellcheck-precommit
    rev: v0.2.0
    hooks:
      - id: shellcheck-system
        name: "lint:shell"

  # Lints YAML files
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.35.1
    hooks:
      - id: yamllint
        name: "lint:yaml"
        args: ["--config-data", "{extends: default, rules: {line-length: {max: 88}}}"]

  # Local custom hooks using tox environments
  - repo: local
    hooks:
      - id: lint
        name: "lint:python"
        entry: tox -e lint
        language: system
        pass_filenames: true
        files: \.py$ # Only trigger for Python files
        args: ["--", "{filenames}"]

        #TODO
      - id: format
        name: "fix:format-python"
        entry: tox -e format
        language: system
        pass_filenames: true
        files: \.py$ # Only trigger for Python files
        args: ["--", "{filenames}"]

      - id: bandit
        name: "check:security-python"
        language: system
        entry: tox -e bandit
        pass_filenames: true
        files: \.py$ # Only trigger for Python files
        args: ["--", "{filenames}"]

      - id: mypy
        name: "check:type-python"
        language: system
        entry: tox -e mypy
        pass_filenames: true
        files: \.py$ # Only trigger for Python files
        args: ["--", "{filenames}"]

      # Updates pre-commit hooks versions
      - id: autoupdate
        name: "update:pre-commit-hooks"
        entry: pre-commit autoupdate
        language: system
        pass_filenames: false
